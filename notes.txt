1. Получить из базы:
	- список точек, где есть свободные подходящие водители
	- матрицу смежности (формируется в программе из таблицы edges)
	
2. Найти ближайшего водителя:
	- По алгоритму Дейкстры посчитать путь ко всем точкам на карте
	- Найти среди всех доступных водителей ближайшего
	

Хранить вершины как record:  node (visited, dist, prev);

При поиске оптимального пути из текущей вершины в следущую не учитывать значения "-1", т.к. это значит, что ребра нет.

Комментарии в коде, создание матрицы смежности
Ошибки:
	- В таблице edges есть записи, которые ссылаются на несуществующие значения locations (64-65)

-1 1 2 3 4
1 -1 5 6 7
2 5 -1 8 9
3 6 8 -1 1
4 7 8 1 -1

(*s == 'A' || *s == 'Б' || *s == 'В' || *s == 'Г' || *s == 'Е' || *s == 'Ё' ||
                               *s == 'Ж' || *s == 'З' || *s == 'И' || *s == 'Й' || *s == 'К' || *s == 'Л' ||
                               *s == 'М' || *s == 'Н' || *s == 'О' || *s == 'П' || *s == 'Р' || *s == 'С' ||
                               *s == 'Т' || *s == 'У' || *s == 'Ф' || *s == 'Х' || *s == 'Ц' || *s == 'Ч' ||
                               *s == 'Ш' || *s == 'Щ' || *s == 'Ъ' || *s == 'Ы' || *s == 'Ь' || *s == 'Э' ||
                               *s == 'Ю' || *s == 'Я'))